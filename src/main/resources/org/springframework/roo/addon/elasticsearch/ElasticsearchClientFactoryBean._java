package org.springframework.roo.addon.elasticsearch;

import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.common.settings.ImmutableSettings.Builder;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.client.Client;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.node.Node;
import org.elasticsearch.node.NodeBuilder;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.FactoryBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.core.io.Resource;

public class ElasticsearchClientFactoryBean implements FactoryBean<Client>, InitializingBean,
    DisposableBean {

  protected final Log logger = LogFactory.getLog(getClass());

  private List<Resource> configLocations;

  private Resource configLocation;

  private Map<String, String> settings;

  private Client client;
  
  private Node node;

  private Map<String, Integer> transportAddresses;

  public void setTransportAddresses(final Map<String, Integer> transportAddresses) {
    this.transportAddresses = transportAddresses;
  }
  
  public void setConfigLocation(final Resource configLocation) {
    this.configLocation = configLocation;
  }

  public void setConfigLocations(final List<Resource> configLocations) {
    this.configLocations = configLocations;
  }

  public void setSettings(final Map<String, String> settings) {
    this.settings = settings;
  }

  @Override
  public void afterPropertiesSet() throws Exception {
    if(this.transportAddresses != null && this.transportAddresses.size() > 0) {
    	internalCreateTransportClient();
    } else {
    	internalCreateNode();
    }
  }

  private void internalCreateNode() {
    final NodeBuilder nodeBuilder = NodeBuilder.nodeBuilder();

    if (null != configLocation) {
      internalLoadSettings(nodeBuilder.settings(), configLocation);
    }

    if (null != configLocations) {
      for (final Resource location : configLocations) {
        internalLoadSettings(nodeBuilder.settings(), location);
      }
    }

    if (null != settings) {
      nodeBuilder.getSettings().put(settings);
    }

    node = nodeBuilder.node();
    
    client = node.client();
  }

  private void internalCreateTransportClient() {
	Builder settingsBuilder = ImmutableSettings.settingsBuilder();
	
	if (null != configLocation) {
      internalLoadSettings(settingsBuilder, configLocation);
    }

    if (null != configLocations) {
      for (final Resource location : configLocations) {
        internalLoadSettings(settingsBuilder, location);
      }
    }

    if (null != settings) {
      settingsBuilder.put(settings);
    }
    
    client = new TransportClient(settingsBuilder);

    if (null != transportAddresses) {
      for (final Entry<String, Integer> address : transportAddresses.entrySet()) {
        if (logger.isInfoEnabled()) {
          logger.info("Adding transport address: " + address.getKey() + " port: "
              + address.getValue());
        }
        ((TransportClient)client).addTransportAddress(new InetSocketTransportAddress(address.getKey(),
            address.getValue()));
      }
    }

  }
  
  private void internalLoadSettings(final Builder builder, final Resource configLocation) {

    try {
      final String filename = configLocation.getFilename();
      if (logger.isInfoEnabled()) {
        logger.info("Loading configuration file from: " + filename);
      }
      builder.loadFromStream(filename, configLocation.getInputStream());
    } catch (final Exception e) {
      throw new IllegalArgumentException("Could not settings from configLocation: "
          + configLocation.getDescription(), e);
    }
  }
  
  

  @Override
  public void destroy() throws Exception {
    try {
      if(client != null) {
    	  client.close();
      }
      
      if(node != null) {
    	  node.close();
      }
    } catch (final Exception e) {
      logger.warn("Error closing Elasticsearch client or node: " + e.getMessage());
    }
  }

  @Override
  public Client getObject() throws Exception {
    return client;
  }

  @Override
  public Class<Client> getObjectType() {
    return Client.class;
  }

  @Override
  public boolean isSingleton() {
    return true;
  }

}